% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TarScript.R
\name{TarScript}
\alias{TarScript}
\title{TarScript class}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Stores all the required commands used
for pipeline building.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TarScript$new()}}
\item \href{#method-build}{\code{TarScript$build()}}
\item \href{#method-update}{\code{TarScript$update()}}
\item \href{#method-print}{\code{TarScript$print()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \link{TarScript} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TarScript$new(
  package = c("targets", "tarchetypes"),
  global = NULL,
  option = NULL,
  targets = NULL,
  pipeline = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{package}}{Character vector. The package need to be included in the
script. Usually only "targets" and "tarchetypes" only. Set it \code{NULL} if
not needed.}

\item{\code{global}}{A \code{list} of expressions. Global variables or functions used
in the script. For example, there might be a \code{source()} call to prepare
functions.}

\item{\code{option}}{A \code{list}. Will be arguments of \code{tar_option_set()}. Set it
\code{NULL} if not needed.}

\item{\code{targets}}{A \code{list} of expressions. Defined targets out of the
pipeline \code{list}.}

\item{\code{pipeline}}{A \code{list} of expressions, each of which is a \code{call} to
\code{tar_target()} or its related. This cannot be \code{NULL} when build.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-build"></a>}}
\if{latex}{\out{\hypertarget{method-build}{}}}
\subsection{Method \code{build()}}{
Build the targets script. This will update the file "_targets.R" from
current project.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TarScript$build(..., styler = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{For future expansion use and must be empty.}

\item{\code{styler}}{A logical indicating if styler should be called to make the
generated file nicer to read. Default is \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update"></a>}}
\if{latex}{\out{\hypertarget{method-update}{}}}
\subsection{Method \code{update()}}{
Update a part of the script.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TarScript$update(step, codes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step}}{A character of the updating step name.}

\item{\code{codes}}{The codes to be added. See details at \link{TarScript$initialize}
for the supported format.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print object more informative.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TarScript$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{For future expansion use and must be empty.}
}
\if{html}{\out{</div>}}
}
}
}
